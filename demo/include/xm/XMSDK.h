#ifndef _LOCAL_SDK_H_
#define _LOCAL_SDK_H_

#include "dataAssist.h"

#ifdef __cplusplus
extern "C"{
#endif

/*******************************************************************
 *  基本接口
 *	功能: XM530从json文件中解析初始配置
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_ParseJson(const char *filename);



/*******************************************************************
 *  基本接口
 *	功能:SDK初始化（必须在开始时调用）
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_StartUp(void);


/*******************************************************************
 *  基本接口
 *	功能:SDK清除（在使用SDK完成之后，要求清除所有资源）
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_CleanUp(void);


/*******************************************************************
 *  基本接口
 *	功能:设备重启
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
void XMSDK_SystemReboot(void);



/*******************************************************************
 *  基本接口
 *	功能:初始化内存分配等接口
 * 	传参: [in] api
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_MemoryFunctionInit(XMSDK_MEMORY_API_S *api); 


/*******************************************************************
 *  基本接口
 *	功能: 获取SDK版本相关信息
 * 	传参:[out] pVersion 参考XMSDK_VERSION_S
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_GetVersion(XMSDK_VERSION_S *pVersion);

/*******************************************************************
 *  基本接口
 *	功能: 设置SDK日志等级
 * 	传参:[in] level 日志等级
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_SetLogLevel(int leve);

/*******************************************************************
 *  基本接口
 *	功能: 重定向日志到文件
 * 	传参:[in] pstLogParam 日志属性
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_SetLog2File(XMSDK_LOG_PARAM_S *pstLogParam);

/*******************************************************************
 *	功能:分辨率、帧率、码率等配置
 *       编码配置的设置与获取(含抓图)
 * 	传参:[in] nChannel 从通道0开始
 *       [out] pEncode
 * 	返回：	0 成功
 * 			<0 失败          
 *******************************************************************/
int XMSDK_GetVideoEncode(int nChannel, XMSDK_VIDEOENCODE_S *pEncode);


/*******************************************************************
 *	功能:编码配置的设置
 * 	传参:[in] nChannel 从通道0开始
 *       [in] pEncode
 * 	返回：	0 成功
 * 			<0 失败          
 *******************************************************************/
int XMSDK_SetVideoEncode(int nChannel, XMSDK_VIDEOENCODE_S *pEncode);


/*******************************************************************
 *	功能:视频接口（获取实时视频流）
 * 	传参:[in] nChannel 视频通道
 *       [in] nStream 参考XMSDK_STREAM_TYPE
 *       [in] pCBFun 通过回调函数获取实时的数据
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_RealPlayStart(int nChannel, int nStream, fRealDataCallBack pCBFun);


/*******************************************************************
 *	功能:停止实时视频流	
 * 	传参:[in] nChannel 从通道0开始
 *       [in] nStream 参考XMSDK_STREAM_TYPE
 *       [in] pCBFun 实时数据回调函数
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_RealPlayStop(int nChannel, int nStream);


/*******************************************************************
 *	功能:强制I帧,尽快产生一个I帧
 * 	传参:[in] nChannel 视频通道
 *       [in] dwStreamType 参考XMSDK_STREAM_TYPE
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_ForceIFrame(int nChannel, uint dwStreamType);


/*******************************************************************
 *  基本接口
 *	功能: 注册设备异常回调函数,用户接受设备的报警信息
 * 	传参:[in] pCBFun 停止回调赋值NULL，重复赋值会覆盖,参考fAbnormalCallBack
 * 	     [in] dwUser 用户自定义数据
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_SetAbnormalCallBack(fAbnormalCallBack pCBFun, unsigned long dwUser);


/*******************************************************************
 *  基本接口
 *	功能:抓图接口（抓取jpg图像）
 * 	传参:[in] nChannel 从通道0开始
 *       [out] phandle
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_CatchJPGPic(int nChannel, hMemory *phandle);


/*******************************************************************
 *  基本接口
 *	功能:获取输入音频属性
 * 	传参:[out] pFormat 参考XMSDK_AUDIO_FORMAT_S
 *       [out] pVqe 参考XMSDK_AUDIO_VQE_S
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_AudioInGetFormat(XMSDK_AUDIO_FORMAT_S* pFormat, XMSDK_AUDIO_VQE_S* pVqe);

/*******************************************************************
 *  基本接口
 *	功能:设置输入音频属性
 * 	传参:[in] pFormat 参考XMSDK_AUDIO_FORMAT_S
 *       [in] pVqe 参考XMSDK_AUDIO_VQE_S
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_AudioInSetFormat(XMSDK_AUDIO_FORMAT_S* pFormat, XMSDK_AUDIO_VQE_S* pVqe);

/*******************************************************************
 *  基本接口
 *	功能:获取输出音频属性
 * 	传参:[out] pFormat 参考XMSDK_AUDIO_FORMAT_S
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_AudioOutGetFormat(XMSDK_AUDIO_FORMAT_S* pFormat);

/*******************************************************************
 *  基本接口
 *	功能:设置输出音频属性
 * 	传参:[in] pFormat 参考XMSDK_AUDIO_FORMAT_S
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_AudioOutSetFormat(XMSDK_AUDIO_FORMAT_S* pFormat);

/*******************************************************************
 *  基本接口
 *	功能:获取音频播放状态.在发送完最后一帧音频数据后，
 *	查询是否已经播放完毕,再来决定关闭音频播放
 * 	传参: 无
 * 	返回：	1 播放完毕
 * 			0 还在播放
 *******************************************************************/
int XMSDK_AudioOutState(void);


/*******************************************************************
 *  基本接口
 *	功能:从麦克风获取音频
 * 	传参:[in] fAudioIn 通过回调函数获取实时数据
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_AudioInStart(fAudioInCallBack fAudioIn);


/*******************************************************************
 *  基本接口
 *	功能:停止从麦克风获取音频
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_AudioInStop(void);


/*******************************************************************
 *  基本接口
 *	功能:给扬声器发送音频数据
 * 	传参:[in] pBuffer 音频数据缓存
 *       [in] nLen 缓存大小
 * 	返回：	0 成功
 * 			<0 失败
 *  注意：函数是阻塞式调用，数据成功放到底层音频解码缓冲后才返回
 *******************************************************************/
int XMSDK_AudioOutSendData(const char *pBuffer, int nLen);


/*******************************************************************
 *  基本接口
 *	功能:设置喇叭音量
 * 	传参:[in] enable 使能
 *		 [in] volumn 见XMSDK_VOLUMN_S
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_AudioSetSpeakerVol(int enable, XMSDK_VOLUMN_S *volumn);


/*******************************************************************
 *  基本接口
 *	功能:获取喇叭音量
 * 	传参:[in] enable 使能
 *		 [out] volumn 见XMSDK_VOLUMN_S
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_AudioGetSpeakerVol(int *enable, XMSDK_VOLUMN_S *volumn);


/*******************************************************************
 *  基本接口
 *	功能:设置咪头音量
 * 	传参:[in] enable 使能
 *		 [in] volumn 
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_AudioSetMicVol(int enable, XMSDK_VOLUMN_S *volumn);


/*******************************************************************
 *  基本接口
 *	功能:获取咪头音量
 * 	传参:[in] enable 使能
 *		 [out] volumn 
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_AudioGetMicVol(int *enable, XMSDK_VOLUMN_S *volumn);

/*******************************************************************
 *  基本接口
 *	功能:注册的获取原始音频数据回调
 * 	传参:[in] pfGetAudioInDataCb 函数指针
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_AudioInRegisterGetDataFunc(fGetAudioInDataCallBack pfGetAudioInDataCb);

/*******************************************************************
 *  基本接口
 *  功能:曝光等相关参数获取
 * 	传参:[in] nChannel 从通道0开始
 *       [in] pCameraConfig 配置结构体
 * 	返回：	0 成功 
 *******************************************************************/
int XMSDK_GetCameraSetting(int nChannel, XMSDK_CAMERA_PARAM_S *pCameraConfig);


/*******************************************************************
 *  基本接口
 *	功能:曝光等相关参数设置
 * 	传参:[in] nChannel 从通道0开始
 *       [in] pCameraConfig 配置结构体
 * 	返回：	0 成功         
 *******************************************************************/
int XMSDK_SetCameraSetting(int nChannel, XMSDK_CAMERA_PARAM_S *pCameraConfig);

/*******************************************************************
 *  基本接口
 *	功能:设置双光模式
 * 	传参:[in] pCameraLedConfig 配置结构体
 * 	返回：	0 成功         
 *******************************************************************/
int XMSDK_SetMutiLightMode(XMSDK_CAMERA_LED_PARAM_S *pCameraLedConfig);

/*******************************************************************
 *  基本接口
 *	功能:注册获取AI结果函数
 * 	传参:[in] fGetAIResultCallBack 函数指针
 * 	返回：	0 成功         
 *******************************************************************/
int XMSDK_RegisterGetAIResultFunc(fGetAIResultCallBack pfGetAIResultCb);

/*******************************************************************
 *  基本接口
 *	功能:获取环境亮度状态
 * 	传参:[out]pdaynight 0代表夜晚，1代表白天
 * 	返回：	0 成功
 * 			-1 失败
 *******************************************************************/
int XMSDK_GetBrightness(unsigned char *pDayOrNight);


/*******************************************************************
 *  基本接口
 *	功能:获取一帧YUV420SP数据
 * 	传参:[in] nChannel 从通道0开始
 *       [out] pstYUV  YUV帧属性
 * 	返回：	0 成功
 * 			<0 失败
 *  注意：Y数据放在文件前面，大小为(YW*YH)字节，
 *        UV数据放在Y数据后面，大小为(YW*YH/2)字节
 *        不要与StartGetStream一起使用
 *******************************************************************/
int XMSDK_YUV_GetFrame(int nChannel, XMSDK_YUV_FRAME_S *pstYUV);

/*******************************************************************
 *  基本接口
 *	功能:释放YUV420SP数据
 * 	传参:[in] nChannel 从通道0开始
 *       [out] pstYUV YUV帧属性
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_YUV_ReleaseFrame(int nChannel, XMSDK_YUV_FRAME_S *pstYUV);


/*******************************************************************
 *  基本接口
 *	功能:获取YUV420SP数据流
 * 	传参:[in] nChannel 从通道0开始
 *       [in] fYuvCB 通过回调函数获取yuv的数据
 *       [in] dwUser 用户自定义数据
 * 	返回：	0 成功
 * 			<0 失败
 * 	注意: Y数据放在buffer 前面，大小为(YW*YH)字节，
 * 	      UV数据放在Y数据后面，大小为(YW*YH/2)字节
 * 	      不要与GetFrame一起使用
 *******************************************************************/
int XMSDK_YUV_StartGetStream(int nChannel, fYUVCallBack fYuvCB, unsigned long dwUser);


/*******************************************************************
 *  基本接口
 *	功能:停止获取YUV数据流
 * 	传参:[in] nChannel 从通道0开始
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_YUV_StopStream(int nChannel);


/*******************************************************************
 *  基本接口
 *	功能:Logo图片叠加
 * 	传参:[in] nChannel 从通道0开始
 *       [in] pLogoPath 例如“/mnt/custom/logo.jpg”（只支持jpeg）
 *       [in] pos 0：左上  1：左下  2：右上  3：右下  4：居中
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_OSD_SetLogo(int nChannel, int nStream, const char* pLogoPath, int pos);


/*******************************************************************
 *  基本接口
 *	功能:时间标题叠加
 * 	传参:[in] nChannel 从通道0开始
 * 	     [in] nStream
 *       [in] pParam 参考结构体XMSDK_OSD_PARAM_S
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/ 
int XMSDK_OSD_ShowTime(int nChannel, int nStream,  XMSDK_OSD_PARAM_S* pParam);


/*******************************************************************
 *  基本接口
 *	功能:时间标题叠加
 * 	传参:[in] nChannel 从通道0开始
 * 	     [in] nStream
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/ 
int XMSDK_OSD_ShutTime(int nChannel, int nStream);


/*******************************************************************
 *  基本接口
 *	功能:字库文件读取
 * 	传参:[in] pFontFile 字体文件指针
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_OSD_FontInit(const char* pFontFile);


/*******************************************************************
 *  基本接口
 *	功能:设置其它OSD标题
 * 	传参:[in] nChannel 从通道0开始
 *       [in] nStream 作为枚举XMSDK_STREAM_TYPE
 *       [in] pOSDParam 参考结构体XMSDK_OSD_PARAM_S
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_OSD_SetTitle(int nChannel, int nStream,  XMSDK_OSD_PARAM_S* pOsdParam, const char* pTitle);


/*******************************************************************
 *  基本接口
 *	功能:用于把RGB1555数据叠加在图像上
 * 	传参:[in] streamType 输入通道号
 *       [in] pParam 参考XMSDK_OSD_TITLE_PARAM_S
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_OSD_SetRGB(int nChannel, int streamType, XMSDK_OSD_TITLE_PARAM_S *pParam);


/*******************************************************************
 *  基本接口
 *	功能:获取当前时间
 * 	传参:[out] minuteswest 与UTC时区差
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_GetTimeZoneInfo(int *minuteswest);


/*******************************************************************
 *  基本接口
 *	功能:获取当前时区
 * 	传参:[in]  minuteswest 与UTC时区差
 * 	返回：	>0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_SetTimeZoneInfo(int minuteswest);


/*******************************************************************
 *  基本接口
 *	功能:获取当前时间
 * 	传参:[in] minuteswest 时差值
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_GetCurrentTime(XMSDK_SYSTEM_TIME_S* pCurTime);


/*******************************************************************
 *  基本接口
 *	功能:设置时间
 * 	传参:[in] pCurTime 时间结构体
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_SetCurrentTime(XMSDK_SYSTEM_TIME_S* pTime);


/*******************************************************************
 *  基本接口
 *	功能:创建移动侦测
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_MD_Create(void);


/*******************************************************************
 *  基本接口
 *	功能:销毁移动侦测
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_MD_Destroy(void);


/*******************************************************************
 *  基本接口
 *	功能:  设置移动侦测参数
 *  传参：[in] pParam
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_MD_SetParam(XMSDK_MD_PARAM_S *pstParam);


/*******************************************************************
 *  基本接口
 *	功能:  设置移动侦测参数
 *  传参：[out] pParam
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_MD_GetParam(XMSDK_MD_PARAM_S *pstParam);


/*******************************************************************
 *  基本接口
 *	功能:	获取移动侦测能力
 *  传参：[out] pCaps
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_MD_GetCaps(XMSDK_MD_CAPS_S *pstCaps);


/*******************************************************************
 *  基本接口
 *	功能:创建遮挡侦测
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_BD_Create(void);


/*******************************************************************
 *  基本接口
 *	功能:销毁遮挡侦测
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_BD_Destory(void);


/*******************************************************************
 *  基本接口
 *	功能: 设置遮挡侦测参数
 *  传参：[in] pstParam 遮挡属性
 * 	返回：	0 成功
 * 			<0 失败
 *  注意：不能在调用XMSDK_SetAbnormalCallBack只用视频遮挡，而不创建
 *         移动侦测，否则无效。
 *******************************************************************/
int XMSDK_BD_SetParam(XMSDK_BD_PARAM_S *pstParam);


/*******************************************************************
 *  基本接口
 *	功能:	获取遮挡侦测参数
 *  传参：[out] pstParam 遮挡属性
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_BD_GetParam(XMSDK_BD_PARAM_S *pstParam);


/*******************************************************************
 *  基本接口
 *	功能:	获取遮挡侦测能力
 *  传参：[out] pstParam 遮挡能力属性
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_BD_GetCaps(XMSDK_BD_CAPS_S *pstCaps);


/* motor action */
#define MOTOR_MOVE_LEFT		1    
#define MOTOR_MOVE_RIGHT    2 
#define MOTOR_MOVE_UP       4 
#define MOTOR_MOVE_DOWN		8 
#define MOTOR_MOVE_LEFTUP (MOTOR_MOVE_LEFT | MOTOR_MOVE_UP)
#define MOTOR_MOVE_LEFTDOWN (MOTOR_MOVE_LEFT | MOTOR_MOVE_DOWN)
#define MOTOR_MOVE_RIGHTUP (MOTOR_MOVE_RIGHT | MOTOR_MOVE_UP)
#define MOTOR_MOVE_RIGHTDOWN (MOTOR_MOVE_RIGHT | MOTOR_MOVE_DOWN)

#define MOTOR_SCAN      16    
#define MOTOR_PRESET    17    
#define MOTOR_STOP      18    
#define MOTOR_AUTOTEST  19 
#define MOTOR_SET_POSTION 20
#define MOTOR_IDLE      0xffff

/*******************************************************************
 *  基本接口
 *	功能: 创建电机
 *  返回：	0 成功
 *        <0 失败
 *******************************************************************/
int XMSDK_MotorCreate(void);


/*******************************************************************
 *  基本接口
 *	功能: 销毁电机
 *  返回：	0 成功
 *        <0 失败
 *******************************************************************/
int XMSDK_MotorDestroy(void);


/*******************************************************************
 *  基本接口
 *	功能: 获取最大步长
 *  传参:[out] px 水平最大步长
 *       [out] py 垂直最大步长
 *  返回：	0 成功
 *******************************************************************/
int XMSDK_MotorGetMaxSteps(unsigned int *px, unsigned int *py);


/*******************************************************************
 *  基本接口
 *	功能: 电机按指定速度移动指定步数
 *  传参:[in] action 转动方向
 *       [in] xspeed 水平速度[0, 52]
 *       [in] yspeed 垂直速度[0, 52]
 *       [in] xstep 水平移动步数[0, x_stepmax]
 *       [in] ystep 垂直移动步数[0, y_stepmax]
 *  返回：	0 成功
 *        <0 失败
 *******************************************************************/
int XMSDK_MotorMove(unsigned int action, unsigned int xspeed, unsigned int yspeed, unsigned int xstep, unsigned int ystep); 


/*******************************************************************
 *  基本接口
 *	功能: 电机按指定速度移动到指定位置
 *  传参:[in] action 转动方向
 *       [in] x 指定位置的水平坐标[0, x_stepmax]
 *       [in] y 指定位置的垂直坐标[0, y_stepmax]
 *       [in] xspeed 水平速度[0, x_stepmax]
 *       [in] yspeed 垂直速度[0, y_stepmax]
 *  返回：	0 成功
 *        <0 失败
 *******************************************************************/
int XMSDK_MotorGotoPreset(unsigned int x, unsigned int y, unsigned int xspeed, unsigned int yspeed);


/*******************************************************************
 *  基本接口
 *	功能: 停止电机
 *  返回：	0 成功
 *        <0 失败
 *******************************************************************/
int XMSDK_MotorStop(void);


/*******************************************************************
 *  基本接口
 *	功能: 获取电机坐标
 *  传参:[out] action 转动方向
 *       [out] x 水平坐标
 *       [out] y 垂直坐标
 *  返回：	0 成功
 *        <0 失败
 *******************************************************************/
int XMSDK_MotorGetPostion(unsigned int *action, unsigned int *x, unsigned int *y);


/*******************************************************************
 *  基本接口
 *	功能:设置当前坐标，一般是用来设备刚起来时设置上次保存下来的坐标,
 *	     这样不用重新定位
 *  传参:[in] x 水平坐标
 *       [in] y 垂直坐标
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_MotorSetPostion(unsigned int x, unsigned int y); 


/*******************************************************************
 *  基本接口
 *	功能: 移动到（0,0）,如果没有自检，可以用这个接口来初始化坐标
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_MotorSetZero(void);

/*******************************************************************
 *  基本接口
 *	功能: 获取电机状态
 *  返回：	0 表示电机转动完成 非0表示电机正忙
 *        <0  失败
 *******************************************************************/
int XMSDK_MotorGetStatus(void);

/*******************************************************************
 *  基本接口
 *	功能:	区域遮挡
 *	传参： [in] index
 *	       [in] pParam
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_SetCover(int index, XMSDK_VIDEO_COVER_PARAM_S *pParam);


/*******************************************************************
 *  基本接口
 *	功能:	升级模块初始化
 *	传参： 无
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_UpdateInit(void);

/*******************************************************************
 *  基本接口
 *	功能:	注册升级进度的回调函数,不需要进度时可以不注册
 *	传参： [in] pCBFun
 *         [in] dwUser 用户自定义数据
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_UpdateProgressAlarm(fAbnormalCallBack pCBFun, unsigned long dwUser);


/*******************************************************************
 *  基本接口
 *	功能:	通过分区名获取分区的地址及大小
 *	传参： [in] name
 *         [out] addr
 *         [out] size
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_UpdateGetMtdSize(const char *name, unsigned long *addr, unsigned long *size);


/*******************************************************************
 *  基本接口
 *	功能:	升级一个分区
 *	传参： [in] buffer 
 *         [in] length 数据大小
 *         [in] start 分区的起始地址
 *         [in] end 分区的结束地址
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_UpdatePartition(unsigned char *buffer, unsigned long length, unsigned long start, unsigned long end);

/*******************************************************************
 *  基本接口
 *	功能:	从文件中升级
 *	传参： [in] pPath  升级文件路径 
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_XMZIP_UpdateFromFile(char *pPath);

/*******************************************************************
 *  基本接口
 *	功能:	从内存中升级
 *	传参： [in] pstMem  升级文件所在的内存块指针
 *         [in] length 内存块长度
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_XMZIP_UpdateFromMem(void *pstMem, int length);

/*******************************************************************
 *  基本接口
 *	功能:	创建看门狗定时器
 *	传参： 无
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_WDT_Create(void);

/*******************************************************************
 *  基本接口
 *	功能:	设置看门狗定时器
 *	传参： [in] timeout 看门狗复位等待时间, 单位为秒
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_WDT_SetTimeout(unsigned int timeout);

/*******************************************************************
 *  基本接口
 *	功能:	销毁看门狗定时器
 *	传参： 无
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_WDT_Destory(void);

/*******************************************************************
 *  基本接口
 *	功能:	看门狗写入
 *	传参： 无
 *  返回：	0 成功
 *        <0  失败
 *******************************************************************/
int XMSDK_WDT_Feed(void);

/*******************************************************************
 *	功能:分配大块内存（调用XMSDK_CleanUp后使用）
 * 	传参:[in] nSize 内存块大小
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
void * XMSDK_ExtraMemoryAlloc(int nSize);

/*******************************************************************
 *	功能:释放内存块
 * 	传参:[in] pstMem 内存块指针
 * 	返回： 无
 *******************************************************************/
void XMSDK_ExtraMemoryFree(void *pstMem);

/*******************************************************************
 *	功能:写GPIO口
 * 	传参:[in] PortIndex GPIO口索引
 *       [in] Value GPIO口输出高低
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_GpioWrite(int PortIndex, unsigned char Value);

/*******************************************************************
 *	功能:读GPIO口
 * 	传参:[in] PortIndex GPIO口索引
 *       [out] Value GPIO口值的指针
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_GpioRead(int PortIndex, unsigned char *Value);

/*******************************************************************
 *  基本接口
 *	功能: wifi环境初始化,检测wifi工具环境
 *	传参： [in] pEthName 无线网卡接口
 *	       [in] ConfigPath  工具和配置脚本路径
 *	       [in] type wifi类型,暂未使用
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_WifiInit(const char *pEthName, const char *pConfigPath, XMSDK_WIFI_TYPE_E type);

/*******************************************************************
 *  基本接口
 *	功能: 退出wifi环境
 *	传参： 无
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_WifiExit(void);

/*******************************************************************
 *  基本接口
 *	功能: 切换wifi模式
 *	传参： type wifi模式 XMSDK_WIFI_MODE_E
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_WifiSwitchMode(int type);

/*******************************************************************
 *  基本接口
 *	功能: 创建AP热点
 *	传参： [in] pAp AP配置属性
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_WifiCreateAp(XMSDK_AP_S *pAp);

/*******************************************************************
 *  基本接口
 *	功能: 连接路由器, 暂支持无加密和wpa2加密种模式
 *	传参： [in] ssid 账户
 *         [in] passwd 密码 为NULL时,表示无加密
 * 	返回：	0 成功
 * 			1 主动退出
 * 	        -1 连接超时
 * 			-2 密码错误
 *******************************************************************/
int XMSDK_WifiConnectSTA(const char *ssid, const char* passwd);

/*******************************************************************
 *  基本接口
 *	功能: 获取wifi列表
 *	传参： [in&out] pWifiList wifi列表
 *	        (in) pWifiList->count 要获取的wifi个数
 *	        (out) pWifiList->stWifiBuf XM_WIFI_S的数据缓存,
 *	              需要调用者执行申请申请内存和释放.
 * 	返回：	非0 实际获取的wifi个数
 * 			<0 失败
 *******************************************************************/
int XMSDK_WifiGetList(XMSDK_WIFI_LIST_S *pWifiList);

/*******************************************************************
 *  基本接口
 *	功能: 切换wifi信道, 用于监控模式下
 *	传参： [in] channel 通道号
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_WifiSwitchChannel(int channel);

/*******************************************************************
 *  基本接口
 *	功能: 根据wifi ssid获取属性
 *	传参：[in] pSSID
 *	      [out] pWifiInfo wifi信息属性
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_WifiGetInfoBySsid(const char* pSSID, XMSDK_WIFI_S *pWifiInfo);

/*******************************************************************
 *  基本接口
 *	功能: 获取本地已连接的wifi信息
 *	传参：[out] pWifiInfo wifi信息属性
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_WifiGetLocalInfo(XMSDK_WIFI_S *pWifiInfo);

/*******************************************************************
 *  基本接口
 *	功能: 获取网卡属性
 *	传参：[in] pEthName 网卡接口
 *	      [out]  pstNetAttr 网卡属性信息
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_WifiGetEthAttr(const char* pEthName, XMSDK_NET_ATTR_S *pstNetAttr);

/*******************************************************************
 *  基本接口
 *	功能: 写入序列号，写入flash固定位置
 *	传参：[in] data 要写入的数据
 *	      [in] len 数据的长度
 *	      [in] version 版本号
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_WriteSeriesNum(void *data, unsigned int len, unsigned int version);
/*******************************************************************
 *  基本接口
 *	功能: 写入序列号，写入flash固定位置
 *	传参：[out] data 读出数据的的地址
 *	      [in] len 分配的地址的长度
 *	      [out] 返回当前加密的version 版本号
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_ReadSeriesNum(void *data, unsigned int len, unsigned int *pversion);

/*******************************************************************
 *  基本接口
 *	功能: 更改/保存环境变量键值
 *	传参：[in] pKey 键名
 *	      [in] pValue 键值
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_EnvWriteKeyValue(const char *pKey, const char *pValue);

/*******************************************************************
 *  基本接口
 *	功能: 读取环境变量键值
 *	传参：[out] pKey 键名
 *	      [out] pValue 键值
 *	      [int] len 键长度
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_EnvReadKeyValue(const char *pKey, char *pValue, int len);

/*******************************************************************
 *  基本接口
 *	功能: FAT32文件系统初始化
 *	传参：[in] pstParam 初始化参数 
 * 	返回：	1 SD卡不存在
 * 	        2 SD卡不正常
 * 	        3 SD卡正常
 * 			<0 失败
 *******************************************************************/
int XMSDK_Fat32Init(XMSDK_SD_INIT_PARAM_S *pstParam);

/*******************************************************************
 *  基本接口
 *	功能: FAT32格式化
 *	传参：[无]
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_Fat32Format(void);

/*******************************************************************
 *  基本接口
 *	功能: 获取存储信息
 *	传参：[out] pstStorageInfo 容量信息属性
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_Fat32GetStorageInfo(XMSDK_SD_STORAGE_S *pstStorageInfo);

/*******************************************************************
 *  基本接口
 *	功能: 计算数据的MD5值
 *	传参：[in] srcdata 数据缓存
 *            [in] len 数据长度
 * 	返回：md5字符串
 * 	      NULL 失败
 *******************************************************************/
int XMSDK_MD5CalcByBuffer(const char *srcStr,  unsigned int srcLen, char *outStr, int outLen);

/*******************************************************************
 *  基本接口
 *	功能: 计算文件的MD5值
 *	传参：[in] srcdata 数据缓存
 *            [in] len 数据长度
 * 	返回：md5字符串
 * 	      NULL 失败
 *******************************************************************/
int XMSDK_MD5CalcByFile(const char* filename, char *outStr, int outLen);

/*******************************************************************
 *  基本接口
 *	功能: 4G联网拨号
 *	传参：[in] pEthName 网卡名,一般为eth1
 *       [in]  pCfgPath 相关配置文件路径
 * 	返回： >0 返回4G模块状态,参考XMSDK_4G_STATE_TYPE 
 * 	      <0: 失败
 *******************************************************************/
int XMSDK_4GDialer (const char *pEthName, const char *pCfgPath);

/*******************************************************************
 *  基本接口
 *	功能: 获取4G模块相关信息
 *	传参：[in] type 获取的命令类型
 *       [in]  value 数据地址
 *             CMD_4G_GET_CARD_ID: value(char*)
 *             CMD_4G_GET_HOST_IP: value(char*)
 *             CMD_4G_GET_SIGNAL_STRENGTH: value(int*)
 *             CMD_4G_GET_REGISTER_STATUS: value(int*)
 *             CMD_4G_GET_NETWORK_TYPE: value(int*)
 *		 [in]  size 数据长度
 * 	返回： >0 返回实际数据类型长度
 * 	      <0: 失败
 *******************************************************************/
int XMSDK_4GGetParam(XMSDK_4G_CMD_TYPE_E type, void* value, unsigned int size);

/*******************************************************************
 *  基本接口
 *	功能: 软件重置4G模块
 *	传参：无
 * 	返回： 0 成功 
 * 	      <0: 失败
 *******************************************************************/
int XMSDK_4GResetModule(void);

/*******************************************************************
 *  基本接口
 *	功能: 获取环境温度
 *	传参：[out] temp 温度值,单位为摄氏度
 * 	返回： 0: 成功 
 * 	      非0: 失败
 *******************************************************************/
int XMSDK_GetTempurature(int *pTemp);

/*******************************************************************
 *  基本接口
 *	功能: 设置PWM信号
 *	传参：[in] gpio pwm管脚gpio口, pstParam PWM参数 
 * 	返回： 0: 成功 
 * 	      非0: 失败
 *******************************************************************/
int XMSDK_SetPwm(int gpio, XMSDK_PWM_PARAM_S *pstParam);

/*******************************************************************
 *  基本接口
 *	功能: 安全的system()函数 
 *	传参：[in] pCmdLine 命令行字符串
 * 	返回： 0: 成功 
 * 	      非0: 失败
 *******************************************************************/
int XMSDK_SafeSystem(const char* pCmdLine);

/*******************************************************************
 *  基本接口
 *	功能: 超级kill函数
 *	传参：[in] pProgName 要kill进程名字
 *	      [in] pSpecStr 要匹配的特殊字符
 * 	返回： 0: 成功 
 * 	      非0: 失败
 *******************************************************************/
int XMSDK_Superkiller(const char *pProgName, const char *pSpecStr);

/*******************************************************************
 *  基本接口
 *	功能: 获取图片效果
 *	传参：[out] pstColor 效果属性
 * 	返回： 0: 成功 
 * 	      非0: 失败
 *******************************************************************/
int XMSDK_GetPictureColor(XMSDK_PICTURE_COLOR_S *pstColor);

/*******************************************************************
 *  基本接口
 *	功能: 设置图片效果
 *	传参：[in] pstColor 效果属性
 * 	返回： 0: 成功 
 * 	      非0: 失败
 *******************************************************************/
int XMSDK_SetPictureColor(XMSDK_PICTURE_COLOR_S *pstColor);


/*******************************************************************
 *  基本接口
 *	功能: 注册热插拔事件回调函数
 *	传参：[in] pfHotplugEventCb 热插拔回调函数
 * 	返回： 0: 成功 
 * 	      非0: 失败
 *******************************************************************/
int XMSDK_RegisterSystemHotplugEventFunc(fHotplugEventCallBack pfHotplugEventCb);

/*******************************************************************
 *  基本接口
 *	功能: ext4文件系统初始化
 *	传参：[in] pstParam 初始化参数 
 * 	返回：	1 SD卡不存在
 * 	        2 SD卡不正常
 * 	        3 SD卡正常
 * 			<0 失败
 *******************************************************************/
int XMSDK_Ext4Init(XMSDK_SD_INIT_PARAM_S *pstParam);

/*******************************************************************
 *  基本接口
 *	功能: ext4格式化
 *	传参：[无]
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_Ext4Format(void);

/*******************************************************************
 *  基本接口
 *	功能: ext4获取存储信息
 *	传参：[out] pstStorageInfo 容量信息属性
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_Ext4GetStorageInfo(XMSDK_SD_STORAGE_S *pstStorageInfo);

/*******************************************************************
 *  基本接口
 *	功能: 获取SD卡设备的文件系统类型
 *	传参：无
 * 	返回：	0 成功
 * 			<0 失败
 *******************************************************************/
int XMSDK_GetSDFileSystemType(void);


#ifdef __cplusplus
}
#endif

#endif
